#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ v2.0
"""
import os
import sys
from pathlib import Path
from inference import analyze_image, debug_analyze_image

def test_with_sample_image():
    """–¢–µ—Å—Ç —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–π –ø–∞–ø–∫–∏"""
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    test_image_path = "../FrontEnd/car-condition-frontend/public/car.jpg"
    
    if not os.path.exists(test_image_path):
        print("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏
        alternative_paths = [
            "../FrontEnd/car-condition-frontend/public/car.png",
            "test_image.jpg",
            "../test_car.jpg"
        ]
        
        test_image_path = None
        for alt_path in alternative_paths:
            if os.path.exists(alt_path):
                test_image_path = alt_path
                break
        
        if not test_image_path:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ car.jpg –≤ public –ø–∞–ø–∫—É")
            return False
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ v2.0")
    print(f"üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image_path}")
    print("="*60)
    
    try:
        # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(test_image_path, 'rb') as f:
            img_bytes = f.read()
        
        print("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        result = debug_analyze_image(img_bytes)
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        print("="*60)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"üßº –ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ: {result.get('dirty', 'N/A')}")
        print(f"   üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {result.get('dirty_prob', 0)*100:.1f}%")
        print(f"   üè∑Ô∏è –°—Ç–∞—Ç—É—Å: {result.get('dirt_status', 'N/A')}")
        print(f"   {result.get('dirt_emoji', 'ü§î')} –û—Ü–µ–Ω–∫–∞: {result.get('dirt_score', 0):.1f}/10")
        print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result.get('dirt_recommendation', 'N/A')}")
        
        print(f"\nüîß –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è: {result.get('damaged', 'N/A')}")
        print(f"   üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {result.get('damaged_prob', 0)*100:.1f}%")
        print(f"   üéØ –ö–ª–∞—Å—Å: {result.get('predicted_class', 'N/A')}")
        print(f"   üîç –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 0)*100:.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑ –¥–ª—è —Ç–∞–∫—Å–∏
        print(f"\nüöï –û–¶–ï–ù–ö–ê –î–õ–Ø –¢–ê–ö–°–ò:")
        print(f"   üìã –°—Ç–∞—Ç—É—Å: {result.get('taxi_status', 'N/A')}")
        taxi_recs = result.get('taxi_recommendations', [])
        if taxi_recs:
            for i, rec in enumerate(taxi_recs[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   {i}. {rec}")
        
        # –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        print(f"\nü§ñ –≠–ö–°–ü–ï–†–¢–ù–ê–Ø –û–¶–ï–ù–ö–ê:")
        expert_assess = result.get('expert_assessment', [])
        if expert_assess:
            for assessment in expert_assess:
                print(f"   ‚Ä¢ {assessment}")
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
        print(f"\nüîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ï–¢–ê–õ–ò:")
        print(f"   üìÅ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {result.get('model_available', False)}")
        print(f"   üñºÔ∏è OpenCV –¥–æ—Å—Ç—É–ø–µ–Ω: {result.get('cv_available', False)}")
        print(f"   üìã –í–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞: {result.get('analysis_version', 'N/A')}")
        
        debug_info = result.get('debug', {})
        if debug_info:
            print(f"   üìä Debug: {debug_info}")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã v2.0...")
    
    missing_deps = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import torch
        print(f"‚úÖ PyTorch: {torch.__version__}")
    except ImportError:
        missing_deps.append("torch")
        print("‚ùå PyTorch –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    try:
        import cv2
        print(f"‚úÖ OpenCV: {cv2.__version__}")
    except ImportError:
        missing_deps.append("opencv-python")
        print("‚ùå OpenCV –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    try:
        import scipy
        print(f"‚úÖ SciPy: {scipy.__version__}")
    except ImportError:
        missing_deps.append("scipy")
        print("‚ùå SciPy –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    try:
        import skimage
        print(f"‚úÖ scikit-image: {skimage.__version__}")
    except ImportError:
        missing_deps.append("scikit-image")
        print("‚ùå scikit-image –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if missing_deps:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_deps)}")
        print("üì• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"   pip install {' '.join(missing_deps)}")
        return False
    else:
        print("\n‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ò–ò-–î–ò–ê–ì–ù–û–°–¢–ò–ö–ò v2.0")
    print("="*60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏...")
    
    print("\n" + "="*60)
    
    # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if not test_with_sample_image():
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return False
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
    print("üöÄ –°–∏—Å—Ç–µ–º–∞ –ò–ò-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ v2.0 –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)