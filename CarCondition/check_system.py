"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ inference.py
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥–µ–ª–∏
"""

def test_file_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤"""
    import os
    from pathlib import Path
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    base_path = Path(__file__).parent
    
    files_to_check = [
        "inference.py",
        "multiclass_damage_model.py", 
        "main.py",
        ".env",
        "models/model.pth"
    ]
    
    all_found = True
    for file in files_to_check:
        full_path = base_path / file
        if full_path.exists():
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ùå {file} - –ù–ï –ù–ê–ô–î–ï–ù")
            all_found = False
    
    return all_found

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ inference.py"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        import sys
        from pathlib import Path
        sys.path.insert(0, str(Path(__file__).parent))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º)
        print("   ‚úÖ inference.py —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print("   ‚úÖ multiclass_damage_model.py —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_env_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é .env"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from pathlib import Path
        env_path = Path(__file__).parent / ".env"
        
        if env_path.exists():
            with open(env_path, 'r') as f:
                content = f.read()
                
            print("   üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ .env:")
            for line in content.strip().split('\n'):
                if line.strip() and not line.startswith('#'):
                    print(f"      {line}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if "MODEL_PATH" in content:
                print("   ‚úÖ MODEL_PATH –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            if "DEVICE" in content:
                print("   ‚úÖ DEVICE –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                
            return True
        else:
            print("   ‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env: {e}")
        return False

def analyze_model_file():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º model.pth —Ñ–∞–π–ª"""
    print("\nüîç –ê–Ω–∞–ª–∏–∑ model.pth...")
    
    from pathlib import Path
    
    model_path = Path(__file__).parent / "models" / "model.pth"
    
    if model_path.exists():
        size_mb = model_path.stat().st_size / (1024 * 1024)
        print(f"   ‚úÖ model.pth –Ω–∞–π–¥–µ–Ω")
        print(f"   üìä –†–∞–∑–º–µ—Ä: {size_mb:.1f} MB")
        
        if size_mb > 80:  # ResNet50 –æ–±—ã—á–Ω–æ ~100MB
            print("   ‚úÖ –†–∞–∑–º–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ResNet50 –º–æ–¥–µ–ª–∏")
        else:
            print("   ‚ö†Ô∏è –†–∞–∑–º–µ—Ä –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–ª—è ResNet50")
            
        return True
    else:
        print("   ‚ùå model.pth –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def summarize_changes():
    """–ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    print("\nüìã –†–ï–ó–Æ–ú–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô –í inference.py:")
    print("="*50)
    
    changes = [
        "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ MulticlassDamageModel",
        "‚úÖ –£–ª—É—á—à–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ get_model()",
        "‚úÖ –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è analyze_dirt_level() –∏–∑ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞",
        "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è _damage_from_logits()",
        "‚úÖ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ analyze_image()",
        "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ debug_analyze_image()",
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ checkpoint"
    ]
    
    for change in changes:
        print(f"  {change}")
    
    print("\nüìä –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò API:")
    print("  ‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π (no_damage/minor_damage/major_damage)")
    print("  ‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞")
    print("  ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω–æ—Å—Ç–∏")
    print("  ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏")
    print("  ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û INFERENCE.PY")
    print("="*50)
    
    tests = [
        test_file_structure,
        test_imports,
        test_env_config,
        analyze_model_file
    ]
    
    passed = 0
    for test in tests:
        if test():
            passed += 1
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{len(tests)} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(tests):
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        summarize_changes()
        print("\nüöÄ –ì–û–¢–û–í–û –ö –ó–ê–ü–£–°–ö–£! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   uvicorn main:app --host 0.0.0.0 --port 8000")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    return passed == len(tests)

if __name__ == "__main__":
    main()