# CarCondition/inference.py
"""
–°–∏—Å—Ç–µ–º–∞ –ò–ò-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π v2.0 –¥–ª—è —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–æ–≤
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π —Å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–æ–π
"""
from __future__ import annotations
from typing import Dict, Optional, Tuple, List
import io, os
from pathlib import Path
from functools import lru_cache

import numpy as np
from PIL import Image, ImageOps, ImageFilter, ImageStat, ImageEnhance

import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision.transforms as T
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
try:
    import cv2
    from scipy import ndimage
    from skimage import feature, measure
    CV_AVAILABLE = True
except ImportError:
    CV_AVAILABLE = False
    print("‚ö†Ô∏è OpenCV/scikit-image –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä—è–∑–∏.")

# –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ —Ñ–∞–π–ª–∞
from multiclass_damage_model import MulticlassDamageModel

load_dotenv()

MODEL_PATH = os.getenv("MODEL_PATH", "models/model.pth")
DEVICE     = os.getenv("DEVICE", "cpu")

# === –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–≤–Ω–æ –∫–∞–∫ –≤ –Ω–æ–≤–æ–º —Å–∫—Ä–∏–ø—Ç–µ ===
_tf = T.Compose([
    T.Resize((224, 224)),
    T.ToTensor(),
    T.Normalize(mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
])

def advanced_dirt_analysis(image: Image.Image) -> Tuple[str, str, float, Dict, str]:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è"""
    if not CV_AVAILABLE:
        # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É –∞–Ω–∞–ª–∏–∑—É
        return _basic_dirt_analysis(image)
    
    img_array = np.array(image)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    cv_image = cv2.cvtColor(img_array, cv2.COLOR_RGB2BGR)
    gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
    
    # 1. –¢–ï–ö–°–¢–£–†–ù–´–ô –ê–ù–ê–õ–ò–ó (–æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≥—Ä—è–∑–∏)
    # Local Binary Patterns –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã
    try:
        lbp = feature.local_binary_pattern(gray, P=24, R=3, method='uniform')
        texture_variance = np.var(lbp)
    except:
        texture_variance = np.var(gray)
    
    # –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ (–≥—Ä—è–∑—å —Å–æ–∑–¥–∞–µ—Ç —Ö–∞–æ—Ç–∏—á–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã)
    sobel_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
    sobel_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)
    gradient_magnitude = np.sqrt(sobel_x**2 + sobel_y**2)
    gradient_chaos = np.std(gradient_magnitude) / (np.mean(gradient_magnitude) + 1e-8)
    
    # 2. –¶–í–ï–¢–û–í–û–ô –ê–ù–ê–õ–ò–ó (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
    # –ê–Ω–∞–ª–∏–∑ –≤ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞—Ö
    hsv = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)
    lab = cv2.cvtColor(cv_image, cv2.COLOR_BGR2LAB)
    
    # –ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å (S –≤ HSV)
    saturation = np.mean(hsv[:,:,1])
    saturation_std = np.std(hsv[:,:,1])
    
    # –ê–Ω–∞–ª–∏–∑ L-–∫–∞–Ω–∞–ª–∞ (—è—Ä–∫–æ—Å—Ç—å –≤ LAB)
    lightness = np.mean(lab[:,:,0])
    lightness_uniformity = 1 / (np.std(lab[:,:,0]) + 1e-8)
    
    # 3. –î–ï–¢–ï–ö–¶–ò–Ø –ì–†–Ø–ó–ù–´–• –ü–Ø–¢–ï–ù
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –≥—Ä—è–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
    # –ì—Ä—è–∑—å –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç –Ω–∏–∑–∫—É—é –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å –∏ —Å—Ä–µ–¥–Ω—é—é —è—Ä–∫–æ—Å—Ç—å
    dirt_mask = (
        (hsv[:,:,1] < 80) &  # –ù–∏–∑–∫–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
        (hsv[:,:,2] > 30) &  # –ù–µ —Å–ª–∏—à–∫–æ–º —Ç–µ–º–Ω–æ
        (hsv[:,:,2] < 200)   # –ù–µ —Å–ª–∏—à–∫–æ–º —Å–≤–µ—Ç–ª–æ
    )
    
    # –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≥—Ä—è–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
    labeled_dirt = measure.label(dirt_mask)
    dirt_regions = measure.regionprops(labeled_dirt)
    
    # –ü–æ–¥—Å—á–µ—Ç –∫—Ä—É–ø–Ω—ã—Ö –≥—Ä—è–∑–Ω—ã—Ö –ø—è—Ç–µ–Ω
    large_dirt_areas = sum(1 for region in dirt_regions if region.area > 100)
    total_dirt_area = np.sum(dirt_mask) / (img_array.shape[0] * img_array.shape[1])
    
    # 4. –ê–ù–ê–õ–ò–ó –ü–û–í–ï–†–•–ù–û–°–¢–ò –ê–í–¢–û–ú–û–ë–ò–õ–Ø
    # –ò—â–µ–º –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è (—á–∏—Å—Ç—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏—Ö –±–æ–ª—å—à–µ)
    # –í—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ RGB –∫–∞–Ω–∞–ª–∞—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ = –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ
    reflection_mask = (
        (img_array[:,:,0] > 200) & 
        (img_array[:,:,1] > 200) & 
        (img_array[:,:,2] > 200)
    )
    reflection_ratio = np.sum(reflection_mask) / (img_array.shape[0] * img_array.shape[1])
    
    # –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞ (—á–∏—Å—Ç–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ—Ä–æ–¥–Ω–∞)
    color_uniformity = []
    for channel in range(3):
        channel_data = img_array[:,:,channel]
        uniformity = 1 / (np.std(channel_data) + 1e-8)
        color_uniformity.append(uniformity)
    avg_color_uniformity = np.mean(color_uniformity)
    
    # 5. –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ó–ù–ê–ö–ò –ì–†–Ø–ó–ò
    # –î–µ—Ç–µ–∫—Ü–∏—è –ø—ã–ª–∏ (–≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π —à—É–º)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    dust_noise = np.mean(np.abs(gray.astype(float) - blurred.astype(float)))
    
    # –î–µ—Ç–µ–∫—Ü–∏—è –≥—Ä—è–∑–µ–≤—ã—Ö —Ä–∞–∑–≤–æ–¥–æ–≤ (–Ω–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–µ –ø—è—Ç–Ω–∞)
    kernel = np.ones((15,15), np.float32) / 225
    filtered = cv2.filter2D(gray, -1, kernel)
    mud_patterns = np.std(gray.astype(float) - filtered.astype(float))
    
    # 6. –†–ê–°–ß–ï–¢ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ò–ù–î–ï–ö–°–ê –ó–ê–ì–†–Ø–ó–ù–ï–ù–ò–Ø
    dirt_score = 0.0
    confidence_factors = []
    
    # –¢–µ–∫—Å—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–≤–µ—Å 30%)
    if texture_variance > 15:
        texture_points = min(3.0, texture_variance / 10)
        dirt_score += texture_points * 0.3
        confidence_factors.append(f"–¢–µ–∫—Å—Ç—É—Ä–∞: +{texture_points:.1f}")
    
    # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ö–∞–æ—Å (–≤–µ—Å 25%)
    if gradient_chaos > 0.8:
        chaos_points = min(2.5, gradient_chaos * 2)
        dirt_score += chaos_points * 0.25
        confidence_factors.append(f"–ì—Ä–∞–¥–∏–µ–Ω—Ç—ã: +{chaos_points:.1f}")
    
    # –¶–≤–µ—Ç–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–≤–µ—Å 20%)
    saturation_penalty = max(0, (100 - saturation) / 25)
    dirt_score += saturation_penalty * 0.2
    if saturation_penalty > 0.5:
        confidence_factors.append(f"–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å: +{saturation_penalty:.1f}")
    
    # –ì—Ä—è–∑–Ω—ã–µ –ø—è—Ç–Ω–∞ (–≤–µ—Å 15%)
    dirt_area_points = min(2.0, total_dirt_area * 10)
    dirt_score += dirt_area_points * 0.15
    if dirt_area_points > 0.3:
        confidence_factors.append(f"–ü—è—Ç–Ω–∞: +{dirt_area_points:.1f}")
    
    # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–π (–≤–µ—Å 10%)
    reflection_penalty = max(0, (0.05 - reflection_ratio) * 20)
    dirt_score += reflection_penalty * 0.1
    if reflection_penalty > 0.2:
        confidence_factors.append(f"–û—Ç—Ä–∞–∂–µ–Ω–∏—è: +{reflection_penalty:.1f}")
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç –∫ —à–∫–∞–ª–µ 0-10
    dirt_score = min(10.0, max(0.0, dirt_score))
    
    # 7. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –° –£–ß–ï–¢–û–ú CONFIDENCE
    confidence = len(confidence_factors) / 5.0  # –ú–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    
    if dirt_score >= 7.5 and confidence > 0.6:
        status = "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≥—Ä—è–∑–Ω–∞—è"
        emoji = "üü´"
        recommendation = "–°–†–û–ß–ù–ê–Ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–π–∫–∞ + –¥–µ—Ç–µ–π–ª–∏–Ω–≥"
    elif dirt_score >= 6.0 and confidence > 0.4:
        status = "–æ—á–µ–Ω—å –≥—Ä—è–∑–Ω–∞—è" 
        emoji = "üü§"
        recommendation = "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ç—â–∞—Ç–µ–ª—å–Ω–∞—è –º–æ–π–∫–∞"
    elif dirt_score >= 4.0:
        status = "–≥—Ä—è–∑–Ω–∞—è"
        emoji = "üî∂"
        recommendation = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–π–∫–∞"
    elif dirt_score >= 2.5:
        status = "—Å–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω–∞—è"
        emoji = "üü®"
        recommendation = "–õ–µ–≥–∫–∞—è –º–æ–π–∫–∞ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞"
    elif dirt_score >= 1.0:
        status = "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å—Ç–∞—è"
        emoji = "üü©"
        recommendation = "–í —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
    else:
        status = "–æ—á–µ–Ω—å —á–∏—Å—Ç–∞—è"
        emoji = "‚ú®"
        recommendation = "–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∏—Å—Ç–æ—Ç—ã"
    
    # 8. –î–ï–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò
    detailed_metrics = {
        'dirt_score': dirt_score,
        'confidence': confidence,
        'texture_variance': texture_variance,
        'gradient_chaos': gradient_chaos,
        'saturation': saturation,
        'lightness': lightness,
        'total_dirt_area': total_dirt_area * 100,  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        'large_dirt_spots': large_dirt_areas,
        'reflection_ratio': reflection_ratio * 100,  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        'dust_noise': dust_noise,
        'mud_patterns': mud_patterns,
        'color_uniformity': avg_color_uniformity,
        'analysis_factors': confidence_factors,
        'recommendation': recommendation
    }
    
    return status, emoji, dirt_score, detailed_metrics, recommendation

def _basic_dirt_analysis(image: Image.Image) -> Tuple[str, str, float, Dict, str]:
    """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑ OpenCV"""
    img_array = np.array(image)
    
    # –¶–≤–µ—Ç–æ–≤–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
    unique_colors_r = len(np.unique(img_array[:,:,0]))
    unique_colors_g = len(np.unique(img_array[:,:,1])) 
    unique_colors_b = len(np.unique(img_array[:,:,2]))
    color_diversity = (unique_colors_r + unique_colors_g + unique_colors_b) / 3
    
    # –ö–æ–Ω—Ç—Ä–∞—Å—Ç
    gray = image.convert('L')
    contrast = ImageStat.Stat(gray).stddev[0]
    
    # –ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
    hsv = image.convert('HSV')
    hsv_array = np.array(hsv)
    saturation = float(np.mean(hsv_array[:,:,1]))
    
    # –ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
    brown_mask = (
        (img_array[:,:,0] > img_array[:,:,2]) &
        (img_array[:,:,1] > img_array[:,:,2]) &
        (img_array[:,:,0] < 150) &
        (img_array[:,:,1] < 120)
    )
    brown_ratio = float(np.sum(brown_mask)) / (img_array.shape[0] * img_array.shape[1])
    
    # –ß–µ—Ç–∫–æ—Å—Ç—å –∫—Ä–∞–µ–≤
    edge_image = gray.filter(ImageFilter.FIND_EDGES)
    edge_intensity = float(np.mean(np.array(edge_image)))
    
    # –Ø—Ä–∫–æ—Å—Ç—å
    brightness = float(np.mean(img_array))
    
    # –ü–æ–¥—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –≥—Ä—è–∑–∏ (–±–∞–∑–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
    dirt_score = 0.0
    confidence_factors = []
    
    if color_diversity < 80:
        dirt_score += 2
        confidence_factors.append("–ù–∏–∑–∫–æ–µ —Ü–≤–µ—Ç–æ–≤–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ")
    elif color_diversity < 120:
        dirt_score += 1
        confidence_factors.append("–£–º–µ—Ä–µ–Ω–Ω–æ–µ —Ü–≤–µ—Ç–æ–≤–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ")
    
    if contrast < 25:
        dirt_score += 2
        confidence_factors.append("–ù–∏–∑–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç")
    elif contrast < 40:
        dirt_score += 1
        confidence_factors.append("–°—Ä–µ–¥–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç")
    
    if saturation < 60:
        dirt_score += 1.5
        confidence_factors.append("–ù–∏–∑–∫–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å")
    elif saturation < 100:
        dirt_score += 0.5
        confidence_factors.append("–£–º–µ—Ä–µ–Ω–Ω–∞—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å")
    
    if brown_ratio > 0.15:
        dirt_score += 2
        confidence_factors.append("–ú–Ω–æ–≥–æ –∫–æ—Ä–∏—á–Ω–µ–≤—ã—Ö –æ—Ç—Ç–µ–Ω–∫–æ–≤")
    elif brown_ratio > 0.08:
        dirt_score += 1
        confidence_factors.append("–ó–∞–º–µ—Ç–Ω—ã –∫–æ—Ä–∏—á–Ω–µ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏")
    
    if edge_intensity < 15:
        dirt_score += 1.5
        confidence_factors.append("–†–∞–∑–º—ã—Ç—ã–µ –∫—Ä–∞—è")
    elif edge_intensity < 25:
        dirt_score += 0.5
        confidence_factors.append("–ù–µ—á–µ—Ç–∫–∏–µ –∫—Ä–∞—è")
    
    if brightness < 90:
        dirt_score += 1
        confidence_factors.append("–ù–∏–∑–∫–∞—è —è—Ä–∫–æ—Å—Ç—å")
    elif brightness < 110:
        dirt_score += 0.5
        confidence_factors.append("–°—Ä–µ–¥–Ω—è—è —è—Ä–∫–æ—Å—Ç—å")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    if dirt_score >= 7.5:
        status = "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≥—Ä—è–∑–Ω–∞—è"
        emoji = "üü´"
        recommendation = "–°–†–û–ß–ù–ê–Ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–π–∫–∞ + –¥–µ—Ç–µ–π–ª–∏–Ω–≥"
    elif dirt_score >= 6.0:
        status = "–æ—á–µ–Ω—å –≥—Ä—è–∑–Ω–∞—è" 
        emoji = "üü§"
        recommendation = "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ç—â–∞—Ç–µ–ª—å–Ω–∞—è –º–æ–π–∫–∞"
    elif dirt_score >= 4.0:
        status = "–≥—Ä—è–∑–Ω–∞—è"
        emoji = "üî∂"
        recommendation = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–π–∫–∞"
    elif dirt_score >= 2.5:
        status = "—Å–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω–∞—è"
        emoji = "üü®"
        recommendation = "–õ–µ–≥–∫–∞—è –º–æ–π–∫–∞ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞"
    elif dirt_score >= 1.0:
        status = "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å—Ç–∞—è"
        emoji = "üü©"
        recommendation = "–í —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
    else:
        status = "–æ—á–µ–Ω—å —á–∏—Å—Ç–∞—è"
        emoji = "‚ú®"
        recommendation = "–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∏—Å—Ç–æ—Ç—ã"

    detailed_metrics = {
        'dirt_score': dirt_score,
        'confidence': len(confidence_factors) / 6.0,  # –ú–∞–∫—Å–∏–º—É–º 6 —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–æ–≤–æ–º –∞–Ω–∞–ª–∏–∑–µ
        'color_diversity': color_diversity,
        'contrast': contrast,
        'saturation': saturation,
        'brown_ratio': brown_ratio * 100,  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        'edge_intensity': edge_intensity,
        'brightness': brightness,
        'analysis_factors': confidence_factors,
        'recommendation': recommendation
    }
    
    return status, emoji, dirt_score, detailed_metrics, recommendation

def enhanced_damage_prediction(model, image_tensor, device, original_image):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    class_names = ['no_damage', 'minor_damage', 'major_damage']
    
    with torch.no_grad():
        image_tensor = image_tensor.to(device)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        outputs = model(image_tensor)
        probabilities = F.softmax(outputs, dim=1)
        confidence, predicted = torch.max(probabilities, 1)
        
        probs = probabilities.cpu().numpy()[0]
        predicted_class = class_names[predicted.item()]
        confidence_score = confidence.item()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        img_array = np.array(original_image)
        
        if CV_AVAILABLE:
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑–∫–æ—Å—Ç–∏ (—Ä–∞–∑–º—ã—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–≥—É—Ç –¥–∞–≤–∞—Ç—å –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è)
            gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
            laplacian_var = cv2.Laplacian(gray, cv2.CV_64F).var()
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ 
            contrast = gray.std()
            
            # –ü–æ–∏—Å–∫ —á–µ—Ç–∫–∏—Ö –ª–∏–Ω–∏–π (–∫—Ä–∞—è –∫—É–∑–æ–≤–∞, –¥–µ—Ç–∞–ª–∏)
            edges = cv2.Canny(gray, 50, 150)
            edge_density = np.sum(edges > 0) / edges.size
        else:
            # Fallback –¥–ª—è —Å–ª—É—á–∞—è –±–µ–∑ OpenCV
            gray = original_image.convert('L')
            gray_array = np.array(gray)
            laplacian_var = np.var(gray_array)  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–∑–∫–æ—Å—Ç–∏
            contrast = gray_array.std()
            edge_density = 0.05  # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
        
        # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è confidence –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        quality_factor = 1.0
        
        if laplacian_var < 100:  # –†–∞–∑–º—ã—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            quality_factor *= 0.8
            
        if contrast < 30:  # –ù–∏–∑–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
            quality_factor *= 0.9
            
        if edge_density < 0.05:  # –ú–∞–ª–æ —á–µ—Ç–∫–∏—Ö –∫—Ä–∞–µ–≤
            quality_factor *= 0.85
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é
        adjusted_confidence = confidence_score * quality_factor
        
        # –ï—Å–ª–∏ confidence —É–ø–∞–ª–æ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞, –ø–æ–Ω–∏–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if adjusted_confidence < 0.6 and predicted_class == 'major_damage':
            # –ü–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∫–∞–∫ minor_damage
            if probs[1] > 0.3:  # –ï—Å–ª–∏ minor_damage —Ç–æ–∂–µ –≤–µ—Ä–æ—è—Ç–Ω–æ
                predicted_class = 'minor_damage'
                confidence_score = probs[1] * quality_factor
                
        elif adjusted_confidence < 0.5 and predicted_class == 'minor_damage':
            # –ü–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∫–∞–∫ no_damage
            if probs[0] > 0.25:
                predicted_class = 'no_damage'
                confidence_score = probs[0] * quality_factor
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_metrics = {
            'sharpness': laplacian_var,
            'contrast': contrast,
            'edge_density': edge_density * 100,  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            'quality_factor': quality_factor,
            'original_confidence': confidence.item(),
            'adjusted_confidence': adjusted_confidence
        }
        
        return predicted_class, confidence_score, probs, class_names, quality_metrics

def determine_repairability_enhanced(predicted_class, confidence, major_damage_prob, quality_metrics, dirt_status, dirt_score):
    """
    –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–∞–∫—Å–∏ —Å —É—á–µ—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
    """
    
    # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø–æ—Ä–æ–≥–∏ —Å —É—á–µ—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    quality_adjustment = quality_metrics.get('quality_factor', 1.0)
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏
    TAXI_BAN_THRESHOLD = 80.0 * quality_adjustment
    REPAIR_REQUIRED_THRESHOLD = 60.0 * quality_adjustment  
    CONDITIONAL_THRESHOLD = 35.0 * quality_adjustment
    MINOR_DAMAGE_TAXI_LIMIT = 45.0 * quality_adjustment
    
    # –£—á–∏—Ç—ã–≤–∞–µ–º –≤–ª–∏—è–Ω–∏–µ –≥—Ä—è–∑–∏ –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
    dirt_uncertainty = min(0.2, dirt_score / 50)  # –î–æ 20% –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç –≥—Ä—è–∑–∏
    effective_confidence = confidence * (1 - dirt_uncertainty)
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    quality_warnings = []
    if quality_metrics.get('sharpness', 1000) < 100:
        quality_warnings.append("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º—ã—Ç–æ - —Ç–æ—á–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–µ–Ω–∞")
    if quality_metrics.get('contrast', 100) < 30:
        quality_warnings.append("‚ö†Ô∏è –ù–∏–∑–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç - –≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏")
    if dirt_score > 6:
        quality_warnings.append("‚ö†Ô∏è –°–∏–ª—å–Ω–æ–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑")
    
    if predicted_class == 'major_damage':
        if effective_confidence > 0.85 and major_damage_prob > TAXI_BAN_THRESHOLD:
            return "taxi_banned", (
                "üö´ –ê–í–¢–û–ú–û–ë–ò–õ–¨ –ó–ê–ü–†–ï–©–ï–ù –î–õ–Ø –†–ê–ë–û–¢–´ –í –¢–ê–ö–°–ò!",
                f"   üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {major_damage_prob:.1f}%",
                f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: {effective_confidence*100:.1f}%",
                f"   üö® –ü—Ä–µ–≤—ã—à–µ–Ω –ø—Ä–µ–¥–µ–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ({TAXI_BAN_THRESHOLD:.0f}%)",
                "   ‚ö†Ô∏è –†–ò–°–ö–ò: –£–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –∏ –≤–æ–¥–∏—Ç–µ–ª—è",
                "   üìâ –†–ï–ü–£–¢–ê–¶–ò–Ø: –°–µ—Ä—å–µ–∑–Ω—ã–π —É—â–µ—Ä–± –∏–º–∏–¥–∂—É —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞",
                "   ‚öñÔ∏è –ü–†–ê–í–û: –ù–∞—Ä—É—à–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º",
                "   üéØ –†–ï–®–ï–ù–ò–ï: –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø–∞—Ä–∫–∞, –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
                *quality_warnings
            ), "safety_violation"
            
        elif effective_confidence > 0.65 or major_damage_prob > REPAIR_REQUIRED_THRESHOLD:
            return "repair_required", (
                "üîß –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –†–ï–ú–û–ù–¢ –ü–ï–†–ï–î –î–û–ü–£–°–ö–û–ú –ö –†–ê–ë–û–¢–ï",
                f"   üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {major_damage_prob:.1f}%",
                f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: {effective_confidence*100:.1f}%",
                f"   ‚öñÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –¥–æ–ø—É—Å–∫–∞ –∫ –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º ({REPAIR_REQUIRED_THRESHOLD:.0f}%)",
                "   ‚ùå –°–¢–ê–¢–£–°: –í–†–ï–ú–ï–ù–ù–û –ò–°–ö–õ–Æ–ß–ï–ù –∏–∑ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏",
                "   üîß –¢–†–ï–ë–û–í–ê–ù–ò–Ø: –ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç + —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä",
                "   üí∞ –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: 150-500 —Ç—ã—Å. —Ä—É–±.",
                "   üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞",
                "   ‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è: 2-4 –Ω–µ–¥–µ–ª–∏",
                *quality_warnings
            ), "mandatory_repair"
            
        elif major_damage_prob > CONDITIONAL_THRESHOLD:
            return "conditional_taxi", (
                "‚ö†Ô∏è –£–°–õ–û–í–ù–û –î–û–ü–£–°–¢–ò–ú –° –°–ï–†–¨–ï–ó–ù–´–ú–ò –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø–ú–ò",
                f"   üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {major_damage_prob:.1f}%",
                f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: {effective_confidence*100:.1f}%",
                f"   üî∂ –í –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–æ–π –∑–æ–Ω–µ ({CONDITIONAL_THRESHOLD:.0f}-{REPAIR_REQUIRED_THRESHOLD:.0f}%)",
                "   üö´ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø: –¢–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏–≥–æ—Ä–æ–¥—Å–∫–∏–µ –ø–æ–µ–∑–¥–∫–∏ –¥–æ 50 –∫–º",
                "   ‚ùå –ó–ê–ü–†–ï–¢: –ú–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–∏–µ —Ä–µ–π—Å—ã –∏ VIP-–∫–ª–∏–µ–Ω—Ç—ã",
                "   üîç –ö–û–ù–¢–†–û–õ–¨: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
                "   üíº –°–¢–†–ê–•–û–í–ê–ù–ò–ï: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã",
                "   ‚è∞ –ü–õ–ê–ù: –°—Ä–æ—á–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –Ω–µ–¥–µ–ª—å",
                "   ü©∫ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–µ",
                *quality_warnings
            ), "high_risk_operation"
        else:
            return "conditional_taxi", (
                "üîß –ö–û–°–ú–ï–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ú–û–ù–¢ –ù–ê–°–¢–û–Ø–¢–ï–õ–¨–ù–û –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù",
                f"   üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {major_damage_prob:.1f}%",
                f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: {effective_confidence*100:.1f}%",
                "   ‚úÖ –î–æ–ø—É—Å—Ç–∏–º–æ –¥–ª—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏",
                "   üé® –ò–ú–ò–î–ñ: –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã",
                "   üí∞ –ó–∞—Ç—Ä–∞—Ç—ã: 50-150 —Ç—ã—Å. —Ä—É–±. –Ω–∞ –∫–æ—Å–º–µ—Ç–∏–∫—É",
                "   ‚≠ê –†–ï–ô–¢–ò–ù–ì: –ü–æ–º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤—ã—Å–æ–∫–∏–µ –æ—Ü–µ–Ω–∫–∏",
                *quality_warnings
            ), "cosmetic_repair"
    
    elif predicted_class == 'minor_damage':
        minor_damage_prob = 100 - major_damage_prob
        if effective_confidence > 0.7 and minor_damage_prob > MINOR_DAMAGE_TAXI_LIMIT:
            return "conditional_taxi", (
                "üîß –ö–û–°–ú–ï–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ú–û–ù–¢ –ñ–ï–õ–ê–¢–ï–õ–ï–ù –î–õ–Ø –¢–ê–ö–°–ò",
                f"   üé® –ó–∞–º–µ—Ç–Ω—ã–µ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã: {minor_damage_prob:.1f}%",
                f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: {effective_confidence*100:.1f}%",
                "   ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è",
                "   üìâ –ò–ú–ò–î–ñ: –ú–æ–∂–µ—Ç —Å–Ω–∏–∂–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤",
                "   üí∞ –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ: 30-100 —Ç—ã—Å. —Ä—É–±.",
                "   üì± –û–¢–ó–´–í–´: –í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –≤–Ω–µ—à–Ω–µ–º –≤–∏–¥–µ",
                "   üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ü–ª–∞–Ω–æ–≤—ã–π –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–º–æ–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞",
                *quality_warnings
            ), "image_improvement"
        else:
            return "taxi_ready", (
                "‚úÖ –ü–†–ò–ì–û–î–ï–ù –î–õ–Ø –†–ê–ë–û–¢–´ –í –¢–ê–ö–°–ò",
                f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: {effective_confidence*100:.1f}%",
                "   üîß –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ—Ñ–µ–∫—Ç—ã",
                "   üöó –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∏–≥–æ–¥–µ–Ω –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫",
                "   üí∞ –ó–∞—Ç—Ä–∞—Ç—ã: 10-50 —Ç—ã—Å. —Ä—É–±. –Ω–∞ –º–µ–ª–∫–∏–π —Ä–µ–º–æ–Ω—Ç",
                "   ‚è±Ô∏è –í—Ä–µ–º—è —Ä–µ–º–æ–Ω—Ç–∞: 1-3 –¥–Ω—è",
                "   üèÜ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å–µ—Ä–≤–∏—Å–∞",
                *quality_warnings
            ), "minor_maintenance"
    
    else:  # no_damage
        return "taxi_ready", (
            "üèÜ –ò–î–ï–ê–õ–ï–ù –î–õ–Ø –ü–†–ï–ú–ò–£–ú –¢–ê–ö–°–ò-–°–ï–†–í–ò–°–ê",
            f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: {effective_confidence*100:.1f}%",
            "   ‚ú® –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏",
            "   üíé –ö–õ–ê–°–°: –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è VIP –∏ –±–∏–∑–Ω–µ—Å-–∫–ª–∏–µ–Ω—Ç–æ–≤",
            "   üìà –†–ï–ô–¢–ò–ù–ì: –û–±–µ—Å–ø–µ—á–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
            "   üí∞ –¢–ê–†–ò–§–´: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–µ–º–∏—É–º-—Å–µ–≥–º–µ–Ω—Ç–µ",
            "   üéØ –°–¢–ê–¢–£–°: –≠—Ç–∞–ª–æ–Ω –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–∞",
            *quality_warnings
        ), "premium_ready"

def preprocess_image_enhanced(image: Image.Image) -> Tuple[torch.Tensor, Image.Image]:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
    enhancer = ImageEnhance.Sharpness(image)
    image = enhancer.enhance(1.2)  # –ù–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
    
    enhancer = ImageEnhance.Contrast(image)
    image = enhancer.enhance(1.1)  # –ù–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
    
    image_tensor = _tf(image).unsqueeze(0)
    
    return image_tensor, image

@lru_cache(maxsize=1)
def get_model() -> Optional[torch.nn.Module]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ checkpoint —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    p = Path(MODEL_PATH)
    if not p.exists():
        print(f"[inference] MODEL_PATH '{p}' not found")
        return None
    
    device = torch.device(DEVICE)
    model = MulticlassDamageModel(num_classes=3)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º checkpoint
        ckpt = torch.load(str(p), map_location=device, weights_only=False)
        print(f"[inference] Loaded checkpoint type: {type(ckpt)}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç checkpoint –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º state_dict
        state_dict = None
        
        if isinstance(ckpt, dict):
            # –í–∞—Ä–∏–∞–Ω—Ç 1: model_state_dict (—Ñ–æ—Ä–º–∞—Ç –∏–∑ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞)
            if "model_state_dict" in ckpt:
                state_dict = ckpt["model_state_dict"]
                print(f"[inference] Found model_state_dict format")
                if "epoch" in ckpt:
                    print(f"[inference] Model epoch: {ckpt['epoch']}")
                if "f1_score" in ckpt:
                    print(f"[inference] Model F1-score: {ckpt['f1_score']:.4f}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: state_dict
            elif "state_dict" in ckpt:
                state_dict = ckpt["state_dict"]
                print(f"[inference] Found state_dict format")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ø—Ä—è–º–æ–π state_dict –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–∏ –º–æ–¥–µ–ª–∏ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
                model_keys = list(model.state_dict().keys())
                if any(key in ckpt for key in model_keys[:3]):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–ª—é—á–∞
                    state_dict = ckpt
                    print(f"[inference] Found direct state_dict format")
                else:
                    print(f"[inference] Unknown checkpoint format. Keys: {list(ckpt.keys())}")
                    return None
        else:
            # –í–∞—Ä–∏–∞–Ω—Ç 4: —Å–∞–º checkpoint —è–≤–ª—è–µ—Ç—Å—è state_dict
            state_dict = ckpt
            print(f"[inference] Treating checkpoint as direct state_dict")
        
        if state_dict is None:
            print(f"[inference] Could not extract state_dict from checkpoint")
            return None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞
        missing_keys, unexpected_keys = model.load_state_dict(state_dict, strict=False)
        
        if missing_keys:
            print(f"[inference] Missing keys: {missing_keys}")
        if unexpected_keys:
            print(f"[inference] Unexpected keys: {unexpected_keys}")
        
        print(f"[inference] Model loaded successfully (missing: {len(missing_keys)}, unexpected: {len(unexpected_keys)})")
        
        model.eval().to(device)
        return model
        
    except Exception as e:
        print(f"[inference] Error loading model: {e}")
        import traceback
        traceback.print_exc()
        return None

def _damage_from_logits(logits: torch.Tensor) -> Dict[str, float]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç logits –º–æ–¥–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è—Ö.
    logits -> softmax(prob_no, prob_minor, prob_major)
    """
    probs = F.softmax(logits, dim=1).detach().cpu().numpy()[0]
    prob_no, prob_minor, prob_major = float(probs[0]), float(probs[1]), float(probs[2])
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: damaged_prob = 1 - prob_no
    damaged_prob = 1.0 - prob_no
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    class_names = ['no_damage', 'minor_damage', 'major_damage']
    predicted_idx = int(np.argmax(probs))
    predicted_class = class_names[predicted_idx]
    confidence = float(probs[predicted_idx])
    
    return {
        'damaged_prob': round(damaged_prob, 4),
        'damaged': damaged_prob >= 0.5,
        'predicted_class': predicted_class,
        'confidence': round(confidence, 4),
        'probabilities': {
            'no_damage': round(prob_no, 4),
            'minor_damage': round(prob_minor, 4),
            'major_damage': round(prob_major, 4)
        }
    }

def analyze_image(img_bytes: bytes) -> Dict:
    """
    –ì–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥: —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ v2.0
    """
    img = Image.open(io.BytesIO(img_bytes)).convert("RGB")
    img = ImageOps.exif_transpose(img)

    # --- –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä—è–∑–∏ ---
    dirt_status, dirt_emoji, dirt_score, dirt_metrics, dirt_recommendation = advanced_dirt_analysis(img)

    # --- damage —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å ---
    model = get_model()
    if model is None:
        # –µ—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ—Ç ‚Äî –æ—Ç–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –≥—Ä—è–∑—å
        return {
            "dirty": dirt_score >= 5.0,  # –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π —à–∫–∞–ª—ã 0-10
            "dirty_prob": round(dirt_score / 10.0, 4),  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0,1]
            "damaged": False,
            "damaged_prob": 0.0,
            "predicted_class": "unknown",
            "confidence": 0.0,
            "probabilities": {
                "no_damage": 0.0,
                "minor_damage": 0.0,
                "major_damage": 0.0
            },
            "dirt_status": dirt_status,
            "dirt_emoji": dirt_emoji,
            "dirt_score": dirt_score,
            "dirt_metrics": dirt_metrics,
            "dirt_recommendation": dirt_recommendation,
            "model_available": False,
            "expert_assessment": ["‚ùå –ú–æ–¥–µ–ª—å –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è"],
            "taxi_status": "unknown",
            "taxi_recommendations": ["–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"]
        }

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    image_tensor, processed_image = preprocess_image_enhanced(img)
    device = torch.device(DEVICE)
    
    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
    predicted_class, confidence, probabilities, class_names, quality_metrics = enhanced_damage_prediction(
        model, image_tensor, device, processed_image
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
    no_damage_prob = probabilities[0] * 100
    minor_damage_prob = probabilities[1] * 100  
    major_damage_prob = probabilities[2] * 100
    damaged_prob = 1.0 - probabilities[0]  # 1 - no_damage
    
    # –†–∞—Å—á–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–æ–±—Ä–∞—Ç–Ω–∞—è –∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ—Å—Ç–∏)
    integrity_score = no_damage_prob  # –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å = –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
    
    # üéØ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —á–∏—Å—Ç–æ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    original_dirt_score = dirt_score
    original_dirt_status = dirt_status
    
    if integrity_score < 20:  # –ï—Å–ª–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –Ω–∏–∂–µ 20%
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∂–∞–µ–º —á–∏—Å—Ç–æ—Ç—É –¥–æ ~15% (dirt_score ~8.5/10)
        corrected_dirt_score = max(dirt_score, 8.5)  # –ú–∏–Ω–∏–º—É–º 8.5 –∏–∑ 10 (–æ—á–µ–Ω—å –≥—Ä—è–∑–Ω–∞—è)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è
        if corrected_dirt_score >= 8.5:
            dirt_status = "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≥—Ä—è–∑–Ω–∞—è"
            dirt_emoji = "üü´" 
            dirt_recommendation = "–°–†–û–ß–ù–ê–Ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–π–∫–∞ + –¥–µ—Ç–µ–π–ª–∏–Ω–≥ (—Å–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è)"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º dirt_score
        dirt_score = corrected_dirt_score
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –º–µ—Ç—Ä–∏–∫–∏
        dirt_metrics['integrity_correction'] = True
        dirt_metrics['original_dirt_score'] = original_dirt_score
        dirt_metrics['corrected_reason'] = f"–ù–∏–∑–∫–∞—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å ({integrity_score:.1f}%) - –≥—Ä—è–∑—å –º–æ–∂–µ—Ç –º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è"
        
        print(f"‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —á–∏—Å—Ç–æ—Ç—ã: {original_dirt_score:.1f} ‚Üí {dirt_score:.1f} (—Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: {integrity_score:.1f}%)")
    else:
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª–∞—Å—å
        dirt_metrics['integrity_correction'] = False
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è —Ç–∞–∫—Å–∏
    taxi_status, taxi_msgs, economic_status = determine_repairability_enhanced(
        predicted_class, confidence, major_damage_prob, quality_metrics, dirt_status, dirt_score
    )
    
    # –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (–∫—Ä–∞—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è API)
    expert_assessment = []
    expert_assessment.append(f"ü§ñ –ò–ò-–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê v2.0: {predicted_class.replace('_', ' ').upper()}")
    expert_assessment.append(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence*100:.1f}%")
    expert_assessment.append(f"üîß –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: {integrity_score:.1f}%")
    expert_assessment.append(f"üßº –ó–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ: {dirt_status} ({dirt_score:.1f}/10)")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
    if dirt_metrics.get('integrity_correction', False):
        expert_assessment.append(f"‚ö†Ô∏è –ö–û–†–†–ï–ö–¶–ò–Ø: –ß–∏—Å—Ç–æ—Ç–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å {original_dirt_score:.1f} –¥–æ {dirt_score:.1f}")
        expert_assessment.append(f"üìä –ü—Ä–∏—á–∏–Ω–∞: –ù–∏–∑–∫–∞—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –≥—Ä—è–∑—å—é")
    
    expert_assessment.append(f"üöï –°—Ç–∞—Ç—É—Å –¥–ª—è —Ç–∞–∫—Å–∏: {taxi_status.replace('_', ' ').upper()}")
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞
    if quality_metrics.get('sharpness', 1000) < 100:
        expert_assessment.append("‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å")
    
    # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    economic_info = {
        "status": economic_status,
        "taxi_ready": taxi_status in ["taxi_ready"],
        "needs_repair": taxi_status in ["repair_required", "conditional_taxi"],
        "banned": taxi_status == "taxi_banned"
    }

    return {
        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
        "dirty": dirt_score >= 5.0,
        "dirty_prob": round(dirt_score / 10.0, 4),
        "damaged": damaged_prob >= 0.5,
        "damaged_prob": round(damaged_prob, 4),
        "predicted_class": predicted_class,
        "confidence": round(confidence, 4),
        "probabilities": {
            "no_damage": round(probabilities[0], 4),
            "minor_damage": round(probabilities[1], 4),
            "major_damage": round(probabilities[2], 4)
        },
        
        # –ù–æ–≤—ã–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–æ–ª—è
        "integrity_score": round(integrity_score, 2),  # –ù–æ–≤–æ–µ –ø–æ–ª–µ - —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        "dirt_status": dirt_status,
        "dirt_emoji": dirt_emoji,
        "dirt_score": round(dirt_score, 2),
        "dirt_metrics": dirt_metrics,
        "dirt_recommendation": dirt_recommendation,
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞
        "quality_metrics": quality_metrics,
        
        # –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        "expert_assessment": expert_assessment,
        
        # –û—Ü–µ–Ω–∫–∞ –¥–ª—è —Ç–∞–∫—Å–∏
        "taxi_status": taxi_status,
        "taxi_recommendations": list(taxi_msgs),
        "economic_info": economic_info,
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        "model_available": True,
        "analysis_version": "2.0",
        "cv_available": CV_AVAILABLE
    }

# —É–¥–æ–±–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
def debug_analyze_image(img_bytes: bytes) -> Dict:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è analyze_image —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π v2.0
    """
    result = analyze_image(img_bytes)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    result["debug"] = {
        "model_path": MODEL_PATH,
        "device": DEVICE,
        "model_loaded": result.get("model_available", False),
        "opencv_available": CV_AVAILABLE,
        "analysis_version": "2.0",
        "features": {
            "advanced_dirt_analysis": CV_AVAILABLE,
            "enhanced_damage_prediction": True,
            "taxi_economic_assessment": True,
            "quality_metrics": True
        }
    }
    
    return result

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
def analyze_dirt_level(image: Image.Image) -> Tuple[float, Dict[str, float]]:
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (dirt_prob [0..1], –º–µ—Ç—Ä–∏–∫–∏).
    """
    dirt_status, dirt_emoji, dirt_score, dirt_metrics, dirt_recommendation = advanced_dirt_analysis(image)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º dirt_score –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [0,1] –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    dirt_prob = dirt_score / 10.0
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫ —Å—Ç–∞—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    legacy_metrics = {
        'dirt_score': dirt_score,
        'color_diversity': dirt_metrics.get('saturation', 100),
        'contrast': dirt_metrics.get('lightness', 100),
        'saturation': dirt_metrics.get('saturation', 100),
        'brown_ratio': dirt_metrics.get('total_dirt_area', 0) / 100,
        'edge_intensity': 50.0,  # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
        'brightness': dirt_metrics.get('lightness', 100)
    }
    
    return dirt_prob, legacy_metrics
