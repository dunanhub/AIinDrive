#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ inference.py
"""
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é CarCondition –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

def test_model_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏...")
    
    try:
        from CarCondition.inference_old import get_model
        model = get_model()
        
        if model is not None:
            print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            print(f"   –¢–∏–ø –º–æ–¥–µ–ª–∏: {type(model)}")
            print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {sum(p.numel() for p in model.parameters()):,}")
            return True
        else:
            print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_inference_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é inference —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ inference...")
    
    try:
        from CarCondition.inference_old import analyze_image
        from PIL import Image
        import io
        import numpy as np
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 224x224
        test_img = Image.new('RGB', (224, 224), color=(100, 150, 200))
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ bytes
        img_bytes = io.BytesIO()
        test_img.save(img_bytes, format='JPEG')
        img_bytes = img_bytes.getvalue()
        
        # –í—ã–∑—ã–≤–∞–µ–º analyze_image
        result = analyze_image(img_bytes)
        
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è analyze_image —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        for key, value in result.items():
            if isinstance(value, dict):
                print(f"   {key}:")
                for subkey, subvalue in value.items():
                    print(f"     {subkey}: {subvalue}")
            else:
                print(f"   {key}: {value}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ inference: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_debug_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º debug —Ñ—É–Ω–∫—Ü–∏—é"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ debug —Ñ—É–Ω–∫—Ü–∏–∏...")
    
    try:
        from CarCondition.inference_old import debug_analyze_image
        from PIL import Image
        import io
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_img = Image.new('RGB', (224, 224), color=(150, 100, 50))
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ bytes
        img_bytes = io.BytesIO()
        test_img.save(img_bytes, format='JPEG')
        img_bytes = img_bytes.getvalue()
        
        # –í—ã–∑—ã–≤–∞–µ–º debug_analyze_image
        result = debug_analyze_image(img_bytes)
        
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è debug_analyze_image —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("üîç Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        if "debug" in result:
            for key, value in result["debug"].items():
                print(f"   {key}: {value}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ debug —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û INFERENCE.PY")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    print(f"üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests_passed = 0
    total_tests = 3
    
    if test_model_loading():
        tests_passed += 1
    
    if test_inference_function():
        tests_passed += 1
    
    if test_debug_function():
        tests_passed += 1
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if tests_passed == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        
    return tests_passed == total_tests

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)